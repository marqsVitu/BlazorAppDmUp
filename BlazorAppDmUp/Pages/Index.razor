@page "/"
@using BlazorAppDmUp.Models;
@using BlazorAppDmUp.Services;

@inject IJSRuntime jsRuntime
@inject ISpendService spendService

<PageTitle>Index</PageTitle>

<h1>Cadastro de depesas</h1>

<button class="btn btn-primary" @onclick="() => OpenModal()">Nova despesa</button>

@if (TotalOfSpends > 0)
{
	<div class="alert alert-secondary" style="margin-top: 12px;" role="alert">
		Total de despesas: @TotalOfSpends
	</div>
}

@if (Spend == null)
{
	<p><em>Carregando...</em></p>
}
else
{
	<table class='table'>
		<thead>
			<tr>
				<th>ID</th>
				<th>Descriçao</th>
				<th>Valor</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach (var spend in Spends)
			{
				<tr>
					<td>@spend.Id</td>
					<td>@spend.Description</td>
					<td>@spend.Value</td>
					<td>
						<a href='#' @onclick="async () => await Delete(spend.Id)">Deletar</a>
					</td>
				</tr>

			}
		</tbody>
	</table>
}

<ModalDialog @ref="@ModalDialog" Title="Criar despesa">
	<div class="row">
		<div class="form-group">
			<label for="spendDescription" class="col-form-label">Descriçao:</label>
			<input @bind-value="Spend.Description" type="text" class="form-control" id="spendDescription">
		</div>
		<div class="form-group">
			<label for="spendValue" class="col-form-label">Valor:</label>
			<input @bind-value="Spend.Value" id="spendValue" class="form-control" />
		</div>

		<div class="modal-footer">
			<button class="btn btn-secondary" @onclick="() => ModalDialog.Close()">Cancelar</button>
			<button type="button" class="btn btn-primary" @onclick="async () => await AddSpend()">Salvar</button>
		</div>
	</div>
</ModalDialog>


@code{
	private ModalDialog ModalDialog { get; set; }

	private Spend Spend { get; set; }

	public List<Spend> Spends = new();

	public double TotalOfSpends => Spends.Sum(s => s.Value);

	protected override async Task OnInitializedAsync()
	{
		Spend = new();

		Spends = await spendService.GetSpendsAsync();
	}

	async Task Delete(Guid id)
	{
		bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "tem certeza que deseja deletar?");
		if (confirmed is false)
			return;

		var spendToRemove = Spends.FirstOrDefault(s => s.Id == id);
		Spends.Remove(spendToRemove);
		await spendService.SaveSpends(Spends);
	}

	async Task AddSpend()
	{
		if (string.IsNullOrEmpty(Spend.Description))
		{
			await jsRuntime.InvokeAsync<bool>("Alert", "Descrição precisa ser preenchido.");
			return;
		}

		if (Spend.Value <= 0 )
		{
			await jsRuntime.InvokeAsync<bool>("Alert", "Valor deve ser maior que zero.");
			return;
		}

		Spends.Add(new Spend()
			{
				Id = Guid.NewGuid(),
				Description = Spend.Description,
				Value = Spend.Value
			});

			await spendService.SaveSpends(Spends);
			ModalDialog.Close();
	}
		void OpenModal()
		{
			Spend = new();
			ModalDialog.Open();
		}
}


